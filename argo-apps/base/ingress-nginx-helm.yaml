apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: ingress-nginx-helm
  namespace: argocd

  # Add this finalizer ONLY if you want these to cascade delete (A cascade delete, deletes both the app and its resources, rather than only the app.)
  # finalizers:
  #   - resources-finalizer.argocd.argoproj.io

spec:
  project: default
  syncPolicy:
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground

    automated:
      prune: true
      selfHeal: true

  source:
    chart: ingress-nginx
    repoURL: "https://kubernetes.github.io/ingress-nginx"
    targetRevision: 4.9.1

    helm:
      valuesObject:
        fullnameOverride: ingress-nginx
        controller:
          allowSnippetAnnotations: true
          service:
            type: ClusterIP
          ingressClassResource:
            default: true

          ## Resources ##
          resources:
            requests:
              cpu: 300m
              memory: 400Mi
            limits:
              # cpu: without limit
              memory: 400Mi

          ## Replica ##
          autoscaling:
            enabled: false # true
            minReplicas: 2
            maxReplicas: 6
            targetCPUUtilizationPercentage: 75
            targetMemoryUtilizationPercentage: 75
          
          ## Monitoring ##
          metrics:
            enabled: true

            serviceMonitor:
              enabled: true # true
              namespace: ingress-nginx
              additionalLabels:
                prometheus.io/scrap-with: kube-prometheus-stack
              namespaceSelector:
                matchNames: 
                - ingress-nginx
        
            prometheusRule:
              enabled: true # true
              namespace: ingress-nginx
              additionalLabels:
                prometheus.io/scrap-with: kube-prometheus-stack
              rules: 
                - alert: NginxHighHttp5xxErrorRate
                  expr: sum by(ingress, exported_service) (rate(nginx_ingress_controller_requests{status=~"^5.."}[5m])) / sum by(ingress, exported_service) (rate(nginx_ingress_controller_requests[5m])) * 100 > 5
                  for: 1m
                  labels:
                    severity: critical
                  annotations:
                    summary: "Nginx high HTTP 5xx error rate"
                    description: "Too many HTTP requests with status 5xx (> 5%) for ingress '{{ $labels.ingress }}'"

                - alert: NginxLatencyHigh
                  expr: histogram_quantile(0.99, sum(rate(nginx_ingress_controller_request_duration_seconds_bucket[2m])) by (host, instance)) > 3
                  for: 2m
                  labels:
                    severity: warning
                  annotations:
                    summary: "Nginx latency high"
                    description: "Nginx p99 latency is higher than 3 seconds"

  destination:
    server: "https://kubernetes.default.svc"
    namespace: ingress-nginx
