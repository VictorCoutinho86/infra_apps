apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: argocd-helm
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: default
  syncPolicy:
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground

    automated:
      prune: true
      selfHeal: true
      
  source:
    chart: argo-cd
    repoURL: https://argoproj.github.io/argo-helm
    targetRevision: 5.51.0

    # https://github.com/argoproj/argo-helm/tree/main/charts/argo-cd
    helm:
      valuesObject:
        fullnameOverride: argocd
        applicationSet:
          enabled: false
        notifications:
          enabled: false
        configs:
          secret:
            createSecret: false
          cm:
            url:  argo${ENVIRONMENT}.${DOMAIN}
            exec.enabled: "true"
            kustomize.buildOptions: "--load-restrictor LoadRestrictionsNone"
          params:
            server.insecure: true
          cmp:
            create: true
            plugins:
              envsubst:
                init:
                  command: ["sh", "-c"]
                  args: ["kustomize build . --load-restrictor LoadRestrictionsNone -o raw-kustomization.yaml"]              
                generate:
                  command: ["sh", "-c"]
                  args: ["envsubst < raw-kustomization.yaml > processed-kustomization.yaml && cp processed-kustomization.yaml /dev/stdout"]
                discover:
                  fileName: "kustomization.*"

        ## Controller ##
        controller:
          resources:
            limits:
              cpu: 1
              memory: 1024Mi
            requests:
              cpu: 500m
              memory: 1024Mi
          metrics:
            enabled: true
            serviceMonitor:
              enabled: true
              namespace: argocd
              additionalLabels:
                prometheus.io/scrap-with: kube-prometheus-stack
      
        ## DEX ##
        dex:
          enabled: true
          metrics:
            enabled: true
            serviceMonitor:
              enabled: true
              namespace: argocd
              additionalLabels:
                prometheus.io/scrap-with: kube-prometheus-stack

        ## RepoServer ##
        repoServer:
          resources:
            limits:
              cpu: 500m
              memory: 1.5Gi
            requests:
              cpu: 250m
              memory: 512Mi

          volumes:
            - name: custom-tools
              emptyDir: {}
            - name: cmp-plugin
              configMap:
                name: argocd-cmp-cm

          initContainers:
            - name: download-tools
              image: golang:1.21-alpine3.17
              command: [sh, -c]
              args:
                - apk add git && go install github.com/drone/envsubst/cmd/envsubst@v1.0.3 && mv $GOPATH/bin/envsubst /custom-tools/
              volumeMounts:
                - mountPath: /custom-tools
                  name: custom-tools

          extraContainers:        
            - name: envsubst
              command: [/var/run/argocd/argocd-cmp-server]
              image: quay.io/argoproj/argocd:v2.9.0
              securityContext:
                runAsNonRoot: true
                runAsUser: 999
              volumeMounts:
                - mountPath: /var/run/argocd
                  name: var-files
                - mountPath: /home/argocd/cmp-server/plugins
                  name: plugins
                - mountPath: /tmp
                  name: tmp

                # Register plugins into sidecar
                - mountPath: /home/argocd/cmp-server/config/plugin.yaml
                  subPath: envsubst.yaml
                  name: cmp-plugin

                # Mount tools into $PATH
                - name: custom-tools
                  subPath: envsubst
                  mountPath: /usr/local/bin/envsubst

          metrics:
            enabled: true
            serviceMonitor:
              enabled: true
              namespace: argocd
              additionalLabels:
                prometheus.io/scrap-with: kube-prometheus-stack

        ## Redis ##
        redis:
          resources:
            limits:
              cpu: 120m
              memory: 256Mi
            requests:
              cpu: 120m
              memory: 256Mi
          metrics:
            enabled: true
            serviceMonitor:
              enabled: true
              additionalLabels:
                prometheus.io/scrap-with: kube-prometheus-stack
              namespace: argocd

        ## Server ##
        server:
          resources:
            limits:
              cpu: 400m
              memory: 512Mi
            requests:
              cpu: 400m
              memory: 512Mi
          
          ingress:
            enabled: true
            ingressClassName: nginx
            annotations:
              external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
              external-dns.alpha.kubernetes.io/hostname: argo${DNS_ENV}.${DNS_DOMAIN}
              external-dns.alpha.kubernetes.io/target: ${TUNNEL_ID}.cfargotunnel.com
              nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
              nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
          metrics:
            enabled: true
            serviceMonitor:
              enabled: true
              additionalLabels:
                prometheus.io/scrap-with: kube-prometheus-stack
              namespace: argocd

  destination:
    server: "https://kubernetes.default.svc"
    namespace: argocd